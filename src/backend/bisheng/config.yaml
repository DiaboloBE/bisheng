## 数据库配置
#database_url:
#  "mysql+pymysql://root:gAAAAABlsc05yYeNuwuU_m2g7sGMMq2y2jPA72SaUnR05KFPz9uSawL82EXC3tgyFVl_Zp8kEPrfV-eB2SRyk1P_F4JbaXiGDg==@127.0.0.1:3306/bisheng?charset=utf8mb4"
#
## 缓存配置  redis://[[username]:[password]]@localhost:6379/0
#redis_url: "redis://:gAAAAABlskJXI3rk_IxiOVTbg9eP1aqYxJ1I3ciGYJFmpiBJxOo0YJbC_oP60g3EXZTS1fgJJRStx2ehZuRzEkZB9I72Tjqwrw==@127.0.0.1:6379/0"
#
## 知识库的向量库配置  支持使用 !env ${PATH} 填写环境变量的值, 若环境变量不存在则会报错
#vector_stores:
#  milvus:
#    connection_args: '{"host":"127.0.0.1","port":"19530","user":"","password":"","secure":false}'
#    is_partition: true
#    partition_suffix: '1'
#  elasticsearch:
#    url: 'http://127.0.0.1:9200'
#    ssl_verify: '{"basic_auth": ("elastic", "elastic")}'
#
#
## 对象存储， 目前只支持minio
#object_storage:
#  type: minio
#  minio:
#    schema: false
#    cert_check: false
#    endpoint: '127.0.0.1:9000'
#    sharepoint: '127.0.0.1:9000'
#    access_key: minioadmin
#    secret_key: minioadmin



# 数据库配置
#database_url: "mysql+pymysql://root:gAAAAABlp5vQN7g85IfoeK8nLCb9cfVqpy9ZK9kN7b0qbAXZ4NOZT_Ef7stKJBY6PjL0dngQnCvQMdsavuGu-EE2o6Zlvv6l-Frye08DBXRR4WmL7y7EfK4=@192.168.106.116:3306/langflow"
#database_url: "mysql+pymysql://root:gAAAAABlp5vQN7g85IfoeK8nLCb9cfbisheng_3003Vqpy9ZK9kN7b0qbAXZ4NOZT_Ef7stKJBY6PjL0dngQnCvQMdsavuGu-EE2o6Zlvv6l-Frye08DBXRR4WmL7y7EfK4=@192.168.106.116:3306/zgq-test-bisheng"
database_url: "mysql+pymysql://root:gAAAAABlp5vQN7g85IfoeK8nLCb9cfVqpy9ZK9kN7b0qbAXZ4NOZT_Ef7stKJBY6PjL0dngQnCvQMdsavuGu-EE2o6Zlvv6l-Frye08DBXRR4WmL7y7EfK4=@192.168.106.116:3306/bisheng_3003"
redis_url: "redis://192.168.106.120:6379/3"

# celery的broken地址
celery_redis_url: "redis://192.168.106.120:6379/3"
celery_task:
  # 文件解析处理的速率 多少文件并发每秒。不能高于celery的worker并发数
  knowledge_file_time_limit: null  # 每秒处理10个文件  null: 表示无限制
  # 对celery熟悉的用户可以自定义配置任务的路由，启动不同类型的worker处理不同类型的异步任务，注意工作流的执行只能在一个进程内
  task_routers:
    bisheng.worker.knowledge.*: # 知识库文件处理相关任务
      queue: knowledge_celery
    bisheng.worker.workflow.*: # 工作流相关任务
      queue: workflow_celery

# 知识库的向量库配置  支持使用 !env ${PATH} 填写环境变量的值, 若环境变量不存在则会报错
vector_stores:
  milvus:
    connection_args: '{"host":"192.168.106.120","port":"19530","user":"","password":"","secure":false}'
    is_partition: true
    partition_suffix: '1'
  elasticsearch:
    url: 'http://192.168.106.122:32258'
    ssl_verify: '{}'


# 对象存储， 目前只支持minio
object_storage:
  type: minio
  minio:
    schema: false
    cert_check: false
    endpoint: '192.168.106.120:9102'
    sharepoint: '192.168.106.120:9102'
    access_key: minioadmin
    secret_key: minioadmin
    public_bucket: 'bisheng'  # 公共bucket，存储平台上一些需要持久化的文件。会设置为可公开访问
    tmp_bucket: 'tmp-dir'  # 临时bucket，会对传到此bucket内的文件设置有效期

# 可根据loguru的文档配置不同 handlers
logger_conf:
  # 默认输出到sys.stdout的日志级别, 大于等于此级别都会输出
  level: DEBUG
  # 默认输出格式
  format: '<level>[{time:YYYY-MM-DD HH:mm:ss.SSSSSS}] [{level.name} process-{process.id}-{thread.id} {name}:{line}]</level> - <level>trace={extra[trace_id]} {message}</level>'
  # 参考loguru.add()中的参数可以配置多个handler
  handlers:
    # 文件路径，支持插入一些系统环境变量，若环境变量不存在则置空。例如 HOSTNAME: 主机名。后端会处理环境变量的替换
    - sink: "/Users/zhangguoqing/works/logs/bisheng/bisheng.log"
      # 日志级别
      level: INFO
      # 日志格式化函数，extra内支持trace_id
      format: '<level>[{time:YYYY-MM-DD HH:mm:ss.SSSSSS}] [{level.name} process-{process.id}-{thread.id} {name}:{line}]</level> - <level>trace={extra[trace_id]} {message}</level>'
      # 每天的几点进行切割
      rotation: "00:00"
      retention: "3 Days"
      enqueue: ture
