kind: pipeline # 定义对象类型，还有secret和signature两种类型
type: docker # 定义流水线类型，还有kubernetes、exec、ssh等类型
name: cicd # 定义流水线名称

clone:
  disable: true
  
steps: # 定义流水线执行步骤，这些步骤将顺序执行
  - name: clone
    image: alpine/git
    pull: if-not-exists
    environment:
      http_proxy: 
        from_secret: PROXY
      https_proxy:
        from_secret: PROXY
    commands:
    - git clone https://github.com/dataelement/bisheng-enterprise.git .
    - git checkout $DRONE_COMMIT

  - name: set poetry
    pull: if-not-exists
    image: golang
    environment:
      NEXUS_PUBLIC:
        from_secret: NEXUS_PUBLIC
      NEXUS_PUBLIC_PASSWORD:
        from_secret: NEXUS_PUBLIC_PASSWORD
      REPO:
        from_secret: PY_NEXUS
      PROXY:
        from_secret: APT-GET
    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置
      - name: bisheng-cache
        path: /app/build/
    commands:
    - cd ./src/backend
    - cp -r /app/build/nltk_data ./
    - echo $REPO
    - REPO2=$(echo $REPO | sed 's/http:\\/\\///g')
    - sed  '/apt-get/ s|$| '"$PROXY"'|' Dockerfile
    - sed -i '6i\RUN pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple' Dockerfile
    - sed -i '23i\RUN poetry source add --priority=primary qh https://pypi.tuna.tsinghua.edu.cn/simple' Dockerfile
    - cat Dockerfile

  - name: build_docker
    pull: if-not-exists
    image: docker:24.0.6
    privileged: true
    environment:
      http_proxy:
        from_secret: PROXY
      https_proxy:
        from_secret: PROXY
      no_proxy: 192.168.106.8
    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置
      - name: apt-cache
        path: /var/cache/apt/archives # 将应用打包好的Jar和执行脚本挂载出来
      - name: socket
        path: /var/run/docker.sock
    environment:
      http_proxy:
        from_secret: PROXY
      https_proxy:
        from_secret: PROXY
      no_proxy: 192.168.106.8
      version: release
      docker_registry: http://192.168.106.8:6082
      docker_repo: 192.168.106.8:6082/dataelement/bisheng-backend
      docker_user:
        from_secret: NEXUS_USER
      docker_password:
        from_secret: NEXUS_PASSWORD
    commands:
      - cd ./src/backend/
      - docker login -u $docker_user -p $docker_password $docker_registry
      - docker build -t $docker_repo:$version .
      - docker push $docker_repo:$version

  - name: build_docker_frontend
    pull: if-not-exists
    image: docker:24.0.6
    privileged: true
    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置
      - name: apt-cache
        path: /var/cache/apt/archives # 将应用打包好的Jar和执行脚本挂载出来
      - name: socket
        path: /var/run/docker.sock
    environment:
      http_proxy:
        from_secret: PROXY
      https_proxy:
        from_secret: PROXY
      no_proxy: 192.168.106.8
      version: release
      docker_registry: http://192.168.106.8:6082
      docker_repo: 192.168.106.8:6082/dataelement/bisheng-frontend
      docker_user:
        from_secret: NEXUS_USER
      docker_password:
        from_secret: NEXUS_PASSWORD
    commands:
      - cd ./src/frontend/
      - docker login -u $docker_user -p $docker_password $docker_registry
      - docker build -t $docker_repo:$version .
      - docker push $docker_repo:$version

  - name: ssh deploy
    image: appleboy/drone-ssh
    pull: if-not-exists
    settings:
      host: 192.168.106.116
      username: root
      password:
        from_secret: sshpwd
      script:
       - echo =======找到目录=======
       - cd /opt/server/bisheng-test
       - echo =======直接启动=======
       - docker compose pull
       - docker compose up -d

  - name: notify-start # notify
    pull: if-not-exists
    image: plugins/webhook
    settings:
      debug: true
      urls: 
        from_secret: FEISHU_URL
      content_type: application/json
      template: |
        {
          "msg_type": "interactive",
          "card": {
            "type": "template",
            "data": {
              "template_id": "AAqkI9bnY5FUs",
              "template_variable": {
                "repo_name": "{{ repo.name }}",
                "build_branch": "{{build.branch}}",
                "build_author": "{{ DRONE_COMMIT_AUTHOR }}",
                "link": "{{build.link}}",
                "commit_msg": "{{ trim build.message }}",
                "build_tag":"{{build.tag}}",
                "build_start":"{{build.started}}",
                "status": "{{ build.status }}"
              }
            }
          }
        }
    when: # 成功
      status:
        - success
      ref: # git 分支
        - refs/tags/*
      event: # 事  件
        - tag

  - name: publish_nexus
    pull: if-not-exists
    image: docker:24.0.6
    environment:
      version: ${DRONE_TAG}
      USERNAME:
        from_secret: upload_name
      docker_username:
        from_secret: DOCKER_USER
      docker_password:
        from_secret: DOCKER_PASSWORD
    commands:
      - apk add --no-cache curl
      - apk add --no-cache tar
      - apk add --no-cache wget
      - docker login -u $docker_username -p $docker_password 192.168.106.8:6082
      - docker pull 192.168.106.8:6082/project/bisheng-frontend:$version
      - docker pull 192.168.106.8:6082/project/bisheng-backend:$version
      - docker image tag 192.168.106.8:6082/project/bisheng-frontend:$version dataelement/bisheng-frontend:$version
      - docker image tag 192.168.106.8:6082/project/bisheng-backend:$version dataelement/bisheng-backend:$version
      - docker save -o bisheng-frontend-$version.tar dataelement/bisheng-frontend:$version
      - docker save -o bisheng-backend-$version.tar dataelement/bisheng-backend:$version
      - docker rmi dataelement/frontend:$version -f
      - docker rmi dataelement/backend:$version -f
      - mkdir -p deployment/docker-images
      - cp -r docker/* deployment/
      - mv bisheng-fronteend-$version.tar bisheng-backend-$version.tar deployment/docker-images
      - mv deployment bisheng-$version
      - tar czf bisheng-$version.tar.gz bisheng-$version
      - curl -k --progress-bar -o /dev/null --user $USERNAME --upload-file bisheng-$version.tar.gz http://192.168.106.244:5081/repository/raw-hosted/product/bisheng-ent/bisheng-$version.tar.gz
    volumes:
      - name: dockersock
        path: /var/run
    when:
      status:
        - success
      ref: # git 分支
        - refs/tags/*
      event: # 事  件
        - tag

   
volumes:
  - name: bisheng-cache
    host:
      path: /opt/drone/data/bisheng/
  - name: apt-cache
    host:
      path: /opt/drone/data/bisheng/apt/
  - name: maven_local_repo
    host:
      path: /data/drone-data/m2
  - name: data
    host:
      path: /data/drone-data/package/
  - name: dockersock
    host:
      path: /var/run/
